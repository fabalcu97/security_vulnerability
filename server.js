'use strict';
const Express = require('express');
const BodyParser = require('body-parser');
const Mongoose = require('mongoose');
Mongoose.Promise = global.Promise;
Mongoose.connect('mongodb://attack_user:attack@ds139082.mlab.com:39082/security_attacks');

const app = Express();
app.use(BodyParser.json());

const Document = Mongoose.model('Document', {
    title: {
        type: String,
        unique: true
    },
    type: String
});

require('./documents.json').forEach((d) => {
    (new Document(d)).save().catch(() => {

    })
});

/*
 *
 * NoSQL Injection
 * 
 */

const validate = (req, res, next) => {
    const body = req.body;
    if (body.title && typeof body.title !== 'string') {
        return next(new Error('title must be a string'));
    }
    if (body.type && typeof body.type !== 'string') {
        return next(new Error('type must be a string'));
    }
    next();
}

app.post('/nosql-injection', (req, res) => {

    console.log(req.body);

    const query = {};

    if (req.body.type === "secret projects") {
        return res.json([]);
    }
    if (req.body.title) {
        query.title = req.body.title;
    }
    if (req.body.type) {
        query.type = req.body.type;
    }
    if (!query.title && !query.type) {
        return res.json([]);
    }

    Document.find(query).exec()
        .then((r) => res.json(r))
        .catch((err) => res.json(err));
});

app.post('/nosql-not-injection', validate, (req, res) => {

    console.log(req.body);

    const query = {};

    if (req.body.type === "secret projects") {
        return res.json([]);
    }
    if (req.body.title) {
        query.title = req.body.title;
    }
    if (req.body.type) {
        query.type = req.body.type;
    }
    if (!query.title && !query.type) {
        return res.json([]);
    }

    Document. find(query).exec()
        .then((r) => res.json(r))
        .catch((err) => res.json(err));
});

/*
 * 
 *  XSS ATTACK 
 *
 */
app.post('/xss', (req, res) => {
    console.log(req.body);

    var query = eval(req.body.attack);

    res.end();
});

app.post('/not-xss', (req, res) => {
    console.log(req.body);

    var query = JSON.stringify(req.body.attack);
    res.write(query);
    res.write(JSON.parse(query));

    query = eval( "(" + req.body.attack + ")");
    console.log(query);

    res.end();
});

/*
 *
 * Server execution
 * 
 */
app.listen(8000, () => {
    console.log('app listening on port 8000!');
});